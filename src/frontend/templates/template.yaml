# infrastructure/template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for Team Leaderboard Dashboard Backend

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    Environment:
      Variables:
        JWT_SECRET: !Ref JWTSecret
        DYNAMODB_REGION: !Ref AWS::Region

Resources:

  # DynamoDB Tables

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  GuestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Guests
      AttributeDefinitions:
        - AttributeName: guestId
          AttributeType: S
      KeySchema:
        - AttributeName: guestId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  EpisodesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Episodes
      AttributeDefinitions:
        - AttributeName: episodeId
          AttributeType: S
      KeySchema:
        - AttributeName: episodeId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  SponsorsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Sponsors
      AttributeDefinitions:
        - AttributeName: sponsorId
          AttributeType: S
      KeySchema:
        - AttributeName: sponsorId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tasks
      AttributeDefinitions:
        - AttributeName: taskId
          AttributeType: S
        - AttributeName: assignedTo
          AttributeType: S
        - AttributeName: episodeId
          AttributeType: S
      KeySchema:
        - AttributeName: taskId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AssignedToIndex
          KeySchema:
            - AttributeName: assignedTo
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: EpisodeIdIndex
          KeySchema:
            - AttributeName: episodeId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  TeamMembersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TeamMembers
      AttributeDefinitions:
        - AttributeName: teamMemberId
          AttributeType: S
      KeySchema:
        - AttributeName: teamMemberId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Secrets Manager for JWT_SECRET
  JWTSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: TeamLeaderboardDashboard/JWTSecret
      Description: "JWT Secret Key for Team Leaderboard Dashboard Authentication"
      SecretString: "<YOUR_JWT_SECRET_KEY>" # Replace with a secure key

  # Lambda Functions

  # Authentication Functions

  SignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: authentication/signup.lambda_handler
      CodeUri: backend/authentication/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Users
        - DynamoDBCrudPolicy:
            TableName: TeamMembers
      Events:
        SignUp:
          Type: Api
          Properties:
            Path: /signup
            Method: post
            RestApiId: !Ref PodcastApi

  SignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: authentication/signin.lambda_handler
      CodeUri: backend/authentication/
      Policies:
        - DynamoDBReadPolicy:
            TableName: Users
      Events:
        SignIn:
          Type: Api
          Properties:
            Path: /signin
            Method: post
            RestApiId: !Ref PodcastApi

  # Guest Management Functions

  CreateGuestFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: guest_management/create_guest.lambda_handler
      CodeUri: backend/guest_management/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Guests
      Events:
        CreateGuest:
          Type: Api
          Properties:
            Path: /guests
            Method: post
            RestApiId: !Ref PodcastApi

  GetGuestsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: guest_management/get_guests.lambda_handler
      CodeUri: backend/guest_management/
      Policies:
        - DynamoDBReadPolicy:
            TableName: Guests
      Events:
        GetGuests:
          Type: Api
          Properties:
            Path: /guests
            Method: get
            RestApiId: !Ref PodcastApi

  # Episode Management Functions

  CreateEpisodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: episode_management/create_episode.lambda_handler
      CodeUri: backend/episode_management/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Episodes
      Events:
        CreateEpisode:
          Type: Api
          Properties:
            Path: /episodes
            Method: post
            RestApiId: !Ref PodcastApi

  GetEpisodesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: episode_management/get_episodes.lambda_handler
      CodeUri: backend/episode_management/
      Policies:
        - DynamoDBReadPolicy:
            TableName: Episodes
      Events:
        GetEpisodes:
          Type: Api
          Properties:
            Path: /episodes
            Method: get
            RestApiId: !Ref PodcastApi

  # Sponsorship Management Functions

  CreateSponsorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sponsorship_management/create_sponsor.lambda_handler
      CodeUri: backend/sponsorship_management/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Sponsors
      Events:
        CreateSponsor:
          Type: Api
          Properties:
            Path: /sponsors
            Method: post
            RestApiId: !Ref PodcastApi

  GetSponsorsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sponsorship_management/get_sponsors.lambda_handler
      CodeUri: backend/sponsorship_management/
      Policies:
        - DynamoDBReadPolicy:
            TableName: Sponsors
      Events:
        GetSponsors:
          Type: Api
          Properties:
            Path: /sponsors
            Method: get
            RestApiId: !Ref PodcastApi

  # Task Management Functions

  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: task_management/create_task.lambda_handler
      CodeUri: backend/task_management/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Tasks
        - DynamoDBReadPolicy:
            TableName: Episodes
      Events:
        CreateTask:
          Type: Api
          Properties:
            Path: /tasks
            Method: post
            RestApiId: !Ref PodcastApi

  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: task_management/get_tasks.lambda_handler
      CodeUri: backend/task_management/
      Policies:
        - DynamoDBReadPolicy:
            TableName: Tasks
      Events:
        GetTasks:
          Type: Api
          Properties:
            Path: /tasks
            Method: get
            RestApiId: !Ref PodcastApi

  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: task_management/update_task.lambda_handler
      CodeUri: backend/task_management/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Tasks
      Events:
        UpdateTask:
          Type: Api
          Properties:
            Path: /tasks/{taskId}
            Method: put
            RestApiId: !Ref PodcastApi

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: task_management/delete_task.lambda_handler
      CodeUri: backend/task_management/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Tasks
        - DynamoDBReadPolicy:
            TableName: Episodes
      Events:
        DeleteTask:
          Type: Api
          Properties:
            Path: /tasks/{taskId}
            Method: delete
            RestApiId: !Ref PodcastApi

  # Team Member Management Functions

  CreateTeamMemberFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: team_management/create_team_member.lambda_handler
      CodeUri: backend/team_management/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: TeamMembers
        - DynamoDBReadPolicy:
            TableName: Users
      Events:
        CreateTeamMember:
          Type: Api
          Properties:
            Path: /team-members
            Method: post
            RestApiId: !Ref PodcastApi

  GetTeamMembersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: team_management/get_team_members.lambda_handler
      CodeUri: backend/team_management/
      Policies:
        - DynamoDBReadPolicy:
            TableName: TeamMembers
      Events:
        GetTeamMembers:
          Type: Api
          Properties:
            Path: /team-members
            Method: get
            RestApiId: !Ref PodcastApi

  # Leaderboard Function

  GetLeaderboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: leaderboard/get_leaderboard.lambda_handler
      CodeUri: backend/leaderboard/
      Policies:
        - DynamoDBReadPolicy:
            TableName: TeamMembers
      Events:
        GetLeaderboard:
          Type: Api
          Properties:
            Path: /leaderboard
            Method: get
            RestApiId: !Ref PodcastApi

  # Middleware Functions

  AuthorizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: middleware/authorization.lambda_handler
      CodeUri: backend/middleware/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:TeamLeaderboardDashboard/JWTSecret-*
      Events:
        Authorization:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref PodcastApi

  # API Gateway
  PodcastApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        DefaultAuthorizer: ApiAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
      Cors:
        AllowOrigins:
          - https://<YOUR_FRONTEND_DOMAIN> # Replace with your frontend domain
        AllowMethods:
          - OPTIONS
          - GET
          - POST
          - PUT
          - DELETE
        AllowHeaders:
          - Content-Type
          - Authorization

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${PodcastApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"