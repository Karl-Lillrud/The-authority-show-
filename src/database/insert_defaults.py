from pymongo import MongoClient
import os
from dotenv import load_dotenv
import logging

# Load environment variables
load_dotenv()

# MongoDB Configuration
MONGODB_URI = os.getenv("MONGODB_URI")
DATABASE_NAME = "Podmanager"

if not MONGODB_URI:
    raise ValueError("MongoDB URI is missing.")

# Initialize logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize MongoDB Client
try:
    client = MongoClient(MONGODB_URI)
    database = client[DATABASE_NAME]
    logger.info("MongoDB connection established successfully.")
except Exception as e:
    logger.error(f"Failed to connect to MongoDB: {e}")
    raise

# Default documents to insert
default_tasks = [
    {
        "task_name": "Guest received pitch email to join the show as a guest",
        "dependency": None,
        "checkmark": True,
        "type": "Automated",
        "action": "Email",
        "duration": 20,
        "assigned_to": "",
        "notes": "",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Guest filled out the guest form and picked a date",
        "dependency": "Guest received pitch email to join the show as a guest",
        "checkmark": True,
        "type": "Automated",
        "action": "Form submitted",
        "duration": 20,
        "assigned_to": "",
        "notes": "Done manually by the guest",
        "automation_details": "CRM details saved and date for recording saved",
        "additional_links": "",
    },
    {
        "task_name": "Create episode in the system with all predefined tickets",
        "dependency": "Guest received pitch email to join the show as a guest",
        "checkmark": True,
        "type": "Automated",
        "action": "System action",
        "duration": 40,
        "assigned_to": "",
        "notes": "Automatically identified from guest form",
        "automation_details": "Run daily at 8:00",
        "additional_links": "",
    },
    {
        "task_name": "Scheduling confirmation email sent",
        "dependency": "Guest received pitch email to join the show as a guest",
        "checkmark": True,
        "type": "Automated",
        "action": "Email",
        "duration": 20,
        "assigned_to": "",
        "notes": "",
        "automation_details": "Sent same date as form is registered by the guest",
        "additional_links": "",
    },
    {
        "task_name": "Guest preparation email sent",
        "dependency": "Scheduling confirmation email sent",
        "checkmark": True,
        "type": "Automated",
        "action": "Email",
        "duration": 20,
        "assigned_to": "",
        "notes": "Pre-recording checklist (chrome update, silent space)",
        "automation_details": "Sent one week before the recording date",
        "additional_links": "",
    },
    {
        "task_name": "Create cover art",
        "dependency": "Create episode in the system with all predefined tickets",
        "checkmark": False,
        "type": "Manual",
        "action": "Upload action",
        "duration": 60,
        "assigned_to": "",
        "notes": "Use the uploaded profile photo and design cover art in Figma",
        "automation_details": "Save cloud drive link",
        "additional_links": "File upload and verification system as part of the task submission requirements",
    },
    {
        "task_name": "Email sent to guest with cover art and suggestion to post in social media",
        "dependency": "Create cover art",
        "checkmark": True,
        "type": "Automated",
        "action": "Email",
        "duration": 20,
        "assigned_to": "",
        "notes": "",
        "automation_details": "Run daily at 8:00",
        "additional_links": "",
    },
    {
        "task_name": "Recording Scheduled",
        "dependency": "Guest filled out the guest form and picked a date",
        "checkmark": True,
        "type": "Automated",
        "action": "System action",
        "duration": 20,
        "assigned_to": "",
        "notes": "Verify calendar event is created and the Recording date column in status doc is updated",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Email sent to guest with joining link",
        "dependency": "Guest filled out the guest form and picked a date",
        "checkmark": True,
        "type": "Automated",
        "action": "Email",
        "duration": 20,
        "assigned_to": "",
        "notes": "",
        "automation_details": "Send 1 hour before recording starts",
        "additional_links": "",
    },
    {
        "task_name": "Recording in Riverside",
        "dependency": None,
        "checkmark": True,
        "type": "Manual",
        "action": "Host records",
        "duration": 60,
        "assigned_to": "",
        "notes": "Record with Riverside.fm (check mic, lighting, environment)",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Check the transcript and make corrections",
        "dependency": "Previus step",
        "checkmark": False,
        "type": "Manual",
        "action": "Team member",
        "duration": 60,
        "assigned_to": "",
        "notes": "",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Extract the transcript from Riveside and Save to the episode database",
        "dependency": "Previus step",
        "checkmark": False,
        "type": "Manual",
        "action": "Upoload action, Link button for resources",
        "duration": 60,
        "assigned_to": "",
        "notes": "Sould be possible to automate using scraping or webhooks",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Suggest exact parts to remove which would improve the episode",
        "dependency": "Previus step",
        "checkmark": True,
        "type": "Automated",
        "action": "AI Script",
        "duration": 40,
        "assigned_to": "Alan",
        "notes": "Run the transcript through our GPT https://docs.google.com/document/d/1BAg-MHN6RldfTl81z3xi6oYDisJ3a2SpoVPTwMCW3y0/edit?tab=t.0",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Cut and edit the recording by removing parts in the script",
        "dependency": "Previus step",
        "checkmark": False,
        "type": "Manual",
        "action": "Team member",
        "duration": 60,
        "assigned_to": "",
        "notes": "Work based on your personal opinion in combination with the improvement suggestions given to you by our GPT",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Extract the final transcript from Riveside and Save to the episode database and overwrite the previous script",
        "dependency": "Previus step",
        "checkmark": False,
        "type": "Manual",
        "action": "Upoload action, Link button for resources",
        "duration": 60,
        "assigned_to": "",
        "notes": "Sould be possible to automate using scraping or webhooks",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Responds with type of background music and sound effects that may improve the emotional impact of the episode",
        "dependency": "Previus step",
        "checkmark": True,
        "type": "Automated",
        "action": "AI Script",
        "duration": 40,
        "assigned_to": "Simon",
        "notes": "Run the transcript through our GPT https://docs.google.com/document/d/1IiuGb493nrXWAItRjhaiVKX5RlgqNZkfzS0lCK1xUAw/edit?tab=t.0",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Implement the background sound suggestions where they add value to the episode",
        "dependency": "Previus step",
        "checkmark": False,
        "type": "Manual",
        "action": "Team member",
        "duration": 60,
        "assigned_to": "",
        "notes": "Work based on your personal opinion in combination with the improvement suggestions given to you by our GPT",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Riverside specific editing steps",
        "dependency": "Previus step",
        "checkmark": False,
        "type": "Manual",
        "action": "Team member",
        "duration": 60,
        "assigned_to": "",
        "notes": "Add intro/outro clips, smooth speech, generate magic clips",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Improve audio (Final step for Riverside episode to be completed)",
        "dependency": "Previus step",
        "checkmark": False,
        "type": "Manual",
        "action": "Team member",
        "duration": 60,
        "assigned_to": "",
        "notes": "Sould be possible to automate using webhooks or macro",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Release date decided",
        "dependency": "Previus step",
        "checkmark": False,
        "type": "Manual",
        "action": "Imput date selector field",
        "duration": 40,
        "assigned_to": "",
        "notes": "",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Generate shorts with OPUS",
        "dependency": "Previus step",
        "checkmark": False,
        "type": "Manual",
        "action": "Team member",
        "duration": 40,
        "assigned_to": "",
        "notes": "Create and upload short-form content",
        "automation_details": "Sould be possible to automate using webhooks or macro",
        "additional_links": "",
    },
    {
        "task_name": "Shorts saved to cloud drive",
        "dependency": "Previus step",
        "checkmark": False,
        "type": "Manual",
        "action": "Upoload action, Link button for resources",
        "duration": 40,
        "assigned_to": "",
        "notes": "Run the transcript through Quote GPT",
        "automation_details": "Save cloud drive link",
        "additional_links": "Sould be possible to automate using webhooks or macro",
    },
    {
        "task_name": "Generate quotes",
        "dependency": "Task 016",
        "checkmark": True,
        "type": "Automated",
        "action": "AI Script",
        "duration": 40,
        "assigned_to": "Alice",
        "notes": "",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Produce quote images",
        "dependency": "Previus step",
        "checkmark": False,
        "type": "Manual",
        "action": "Team member",
        "duration": 40,
        "assigned_to": "",
        "notes": "",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Save quote images to cloud drive",
        "dependency": "Previus step",
        "checkmark": False,
        "type": "Manual",
        "action": "Upoload action, Link button for resources",
        "duration": 20,
        "assigned_to": "",
        "notes": "Save cloud drive link",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Send Email with link to download shorts and quote images to the guest",
        "dependency": "Task 022 and Task 025",
        "checkmark": True,
        "type": "Automated",
        "action": "Email",
        "duration": 20,
        "assigned_to": "Emma",
        "notes": "when cloud drive link exist",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Guest follow-up ask for recommendations of other guests",
        "dependency": "Task 011 + delay trigger",
        "checkmark": True,
        "type": "Automated",
        "action": "Email",
        "duration": 60,
        "assigned_to": "Emma",
        "notes": "14 days after the episode is live",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Upload and Schedule podcast release",
        "dependency": "Task 020",
        "checkmark": True,
        "type": "Manual",
        "action": "Team member",
        "duration": 60,
        "assigned_to": "",
        "notes": "Sould be possible to automate using webhooks or macro",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Upload and Schedule video pod release",
        "dependency": "Task 120",
        "checkmark": True,
        "type": "Manual",
        "action": "Team member",
        "duration": 60,
        "assigned_to": "",
        "notes": "Sould be possible to automate using webhooks or macro",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Schedule live streaming of the episode",
        "dependency": "Task 120",
        "checkmark": True,
        "type": "Manual",
        "action": "Team member",
        "duration": 40,
        "assigned_to": "",
        "notes": "Plan live-stream replay if required",
        "automation_details": "Sould be possible to automate using webhooks or macro",
        "additional_links": "",
    },
    {
        "task_name": "Schedule Social Media Posts (Metricool)",
        "dependency": "Task 025",
        "checkmark": True,
        "type": "Manual",
        "action": "Link button for resources",
        "duration": 40,
        "assigned_to": "",
        "notes": "Schedule posts with guest tagging using @mention",
        "automation_details": "Sould be possible to automate using webhooks or macro",
        "additional_links": "",
    },
    {
        "task_name": "Generate FAQ",
        "dependency": "Task 016",
        "checkmark": True,
        "type": "Automated",
        "action": "AI Script",
        "duration": 60,
        "assigned_to": "Adrian",
        "notes": "Run the transcript through FAQ GPT",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Review and approve as OK to publish",
        "dependency": "Task 120 and 029 and 030 and 031",
        "checkmark": False,
        "type": "Manual",
        "action": "Link button for resources",
        "duration": 40,
        "assigned_to": "",
        "notes": "Should be possible to automate for manual approval",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Generate blog post on LinkedIn",
        "dependency": "Task 016",
        "checkmark": True,
        "type": "Automated",
        "action": "AI Script",
        "duration": 60,
        "assigned_to": "Isaac",
        "notes": "Run the transcript through Blog post GPT",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Review and combine with the FAQ and publish on Linkedin and Squarespace website and Medium.com",
        "dependency": "Previus step",
        "checkmark": True,
        "type": "Manual",
        "action": "Link button for resources",
        "duration": 40,
        "assigned_to": "",
        "notes": "Should be possible to automate for manual approval",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Generate full episode page on Squarespace website",
        "dependency": "Task 016",
        "checkmark": True,
        "type": "Automated",
        "action": "AI Script",
        "duration": 60,
        "assigned_to": "Ava",
        "notes": "Publish the full transcript with speaker (Karl Lillrud speaking:) call outs",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Review and publish on website",
        "dependency": "Previus step",
        "checkmark": True,
        "type": "Manual",
        "action": "Link button for resources",
        "duration": 20,
        "assigned_to": "",
        "notes": "Should be possible to automate for manual approval",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "“Episode goes live soon” or “Now live” announcement",
        "dependency": "Task 120 + delay trigger",
        "checkmark": True,
        "type": "Automated",
        "action": "Email",
        "duration": 40,
        "assigned_to": "Emma",
        "notes": "",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Newsletter GPT",
        "dependency": "Task 016",
        "checkmark": True,
        "type": "Automated",
        "action": "AI Script",
        "duration": 40,
        "assigned_to": "",
        "notes": "Run the transcript through our GPT https://docs.google.com/document/d/1BAg-MHN6RldfTl81z3xi6oYDisJ3a2SpoVPTwMCW3y0/edit?tab=t.0",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Host improvement feedback GPT",
        "dependency": "Task 016",
        "checkmark": True,
        "type": "Automated",
        "action": "AI Script",
        "duration": 20,
        "assigned_to": "Erik",
        "notes": "Run the transcript through our GPT https://docs.google.com/document/d/1dbeeGGWZb-ldvJfNCgxZjGarb2FezvqaCBZvFPTqd7g/edit?tab=t.0",
        "automation_details": "",
        "additional_links": "",
    },
    {
        "task_name": "Mark episode as completed",
        "dependency": "All tasks marked as done will auto mark this as done",
        "checkmark": True,
        "type": "Automated",
        "action": "System action",
        "duration": 0,
        "assigned_to": "Ashton",
        "notes": "Confirm all tasks are marked as done",
        "automation_details": "",
        "additional_links": "",
    },
]

# Insert default documents
try:
    podcast_tasks_collection = database["DefaultTasks"]
    for task in default_tasks:
        if not podcast_tasks_collection.find_one({"task_name": task["task_name"]}):
            podcast_tasks_collection.insert_one(task)
            logger.info(f"Task '{task['task_name']}' inserted successfully.")
        else:
            logger.info(
                f"Task '{task['task_name']}' already exists. Skipping insertion."
            )
except Exception as e:
    logger.error(f"Failed to insert default tasks: {e}")
    raise
